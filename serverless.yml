org: codeinaire
app: nmm

service: no-meat-may-app

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  webpack:
    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
    includeModules: true   # Node modules configuration for packaging
    excludeFiles: src/**/*.test.js # Provide a glob for files to ignore
  serverless-offline:
    port: 4000
  AWS_ACCOUNT: 592363304474
  DB_HOST:
    Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Address]
  VPC_CIDR: 10

provider:
  name: aws
  runtime: nodejs10.x
  stage: prod
  region: ap-southeast-2
  # Guesstimate - AWS recommends load testing &
  # checking MAX MEMORY USED to adjust the size
  memorySize: 512
  environment:
    DB_HOST: ${opt:LOCAL_DB_HOST, self:custom.DB_HOST}

layers:
  graphql:
    package:
      artifact: lambda_layers/graphql_node_modules.zip

package:
  exclude:
    - node_modules/**

# Raw AWS CloudFormation goes here
resources:
  Resources:
    LambdaRole: ${file(./serverlessResources/LambdaRole.yml)}
    InternetGateway: ${file(./serverlessResources/InternetGateway.yml)}
    VPCGatewayAssociation: ${file(./serverlessResources/VPCGatewayAssociation.yml)}
    VPC: ${file(./serverlessResources/VPC.yml)}
    SubnetA: ${file(./serverlessResources/SubnetA.yml)}
    SubnetB: ${file(./serverlessResources/SubnetB.yml)}
    SubnetGroup: ${file(./serverlessResources/SubnetGroup.yml)}
    RDSSecurityGroup: ${file(./serverlessResources/RDSSecurityGroup.yml)}
    LambdaSecurityGroup: ${file(./serverlessResources/LambdaSecurityGroup.yml)}
    RouteTableSubnetA: ${file(./serverlessResources/RouteTableSubnetA.yml)}
    RouteTableSubnetB: ${file(./serverlessResources/RouteTableSubnetB.yml)}
    RouteA: ${file(./serverlessResources/RouteA.yml)}
    RouteB: ${file(./serverlessResources/RouteB.yml)}
    RouteTableAssociationSubnetA: ${file(./serverlessResources/RouteTableAssociationSubnetA.yml)}
    RouteTableAssociationSubnetB: ${file(./serverlessResources/RouteTableAssociationSubnetB.yml)}
    NATSubnetA: $(file(./serverlessResources/NATSubnetA.yml))
    EIPSubnetA: $(file(./serverlessResources/EIPSubnetA.yml))
    NATSubnetB: $(file(./serverlessResources/NATSubnetB.yml))
    EIPSubnetB: $(file(./serverlessResources/EIPSubnetB.yml))
    PostgreSqlRDSInstance: ${file(./serverlessResources/PostgreSqlRDSInstance.yml)}

functions:
  graphql:
    handler: src/lambda.graphql
    events:
    - http:
        path: nmm-app
        method: post
        cors:
          origin: ${opt:secureOrigin, 'http://localhost:3000'}
          headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - access-control-allow-origin
              - apollographql-client-name
              - apollographql-client-version
          allowCredentials: true
    - http:
        path: nmm-app
        method: get
        cors:
          origin: ${opt:secureOrigin, 'http://localhost:3000'}
          headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - access-control-allow-origin
              - apollographql-client-name
              - apollographql-client-version
          allowCredentials: true
    - http:
        path: playground
        method: get
        cors: true
    vpc:
      securityGroupIds:
        - !GetAtt LambdaSecurityGroup.GroupId
      subnetIds:
        - Ref: SubnetA
        - Ref: SubnetB
    layers:
    # Name = <name of layer>LambdaLayer
      - { Ref: GraphqlLambdaLayer }
