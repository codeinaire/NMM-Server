org: codeinaire
app: nmm

service: no-meat-may-app

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  webpack:
    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
    includeModules: true   # Node modules configuration for packaging
    excludeFiles: src/**/*.test.js # Provide a glob for files to ignore
  serverless-offline:
    port: 4000

provider:
  name: aws
  runtime: nodejs10.x
  stage: prod
  region: ap-southeast-2
  # Guesstimate - AWS recommends load testing & checking MAX MEMORY USED
  # to adjust the size
  memorySize: 512


layers:
  graphql:
    package:
      artifact: lambda_layers/graphql_node_modules.zip

package:
  exclude:
    - node_modules/**

functions:
  graphql:
    handler: src/lambda.graphql
    events:
    - http:
        path: nmm-app
        method: post
        cors:
          origin: ${opt:secureOrigin, 'http://localhost:3000'}
          headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - access-control-allow-origin
              - apollographql-client-name
              - apollographql-client-version
          allowCredentials: true
    - http:
        path: nmm-app
        method: get
        cors:
          origin: ${opt:secureOrigin, 'http://localhost:3000'}
          headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - access-control-allow-origin
              - apollographql-client-name
              - apollographql-client-version
          allowCredentials: true
    # - http:
    #     path: playground
    #     method: '*'
    #     cors: true
    layers:
    # Name = <name of layer>LambdaLayer
      - { Ref: GraphqlLambdaLayer }

# Raw AWS CloudFormation goes here
resources:
  Resources:
    ServerlessVPCGA:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId:
          Ref: ServerlessVPC
        InternetGatewayId:
          Ref: ServerlessInternetGateway
    PostgreSqlRDSInstance:
      Description: 'This template deploys a single RDS PostgreSQL master database.'
      DependsOn: ServerlessVPCGA
      Type: AWS::RDS::DBInstance
      Properties:
        MasterUsername: ${env:DB_USERNAME}
        MasterUserPassword: ${env:DB_PASSWORD}
        AllocatedStorage: 20
        DBName: ${env:DB_DATABASE}
        DBInstanceClass: db.t2.micro
        VPCSecurityGroups:
        - !GetAtt ServerlessSecurityGroup.GroupId
        DBSubnetGroupName:
          Ref: ServerlessSubnetGroup
        Engine: postgres
        PubliclyAccessible: false