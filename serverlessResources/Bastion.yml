Resources:
  BastionMainLogGroup:
    Type: AWS::Logs::LogGroup
  BastionHostRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: NMMBastionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ec2.amazonaws.com
      Policies:
        - PolicyName: BastionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:GetLogEvents
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutRetentionPolicy
                  - logs:PutMetricFilter
                  - logs:CreateLogGroup
                Resource: !Sub
                  - arn:aws:logs:${self:provide.region}:${self:custom.AWS_ACCOUNT}:log-group:${BastionMainLogGroup}:*
              - Effect: Allow
                Action:
                  - ec2:AssociateAddress
                  - ec2:DescribeAddresses
                Resource: '*'
  BastionHostProfile:
    DependsOn: BastionHostPolicy
    Type: AWS::IAM::InstanceProfile
  BastionAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: NMMBastionAutoScale
      LaunchConfigurationName:
        Ref: BastionLaunchConfiguration
      VPCZoneIdentifier:
        Ref: SubnetC
      MinSize: '1'
      MaxSize: '1'
      Cooldown: '300'
      DesiredCapacity: '1'
      Tags:
        - Key: Name
          Value: NMMBastionAutoScale
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 100
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
  BastionLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
        AssociatePublicIpAddress: true
        KeyName: nmmBastionKeyPair
        IamInstanceProfile:
          Ref: BastionHostProfile
        ImageId: ami-0b8b10b5bf11f3a22
        SecurityGroups:
          Ref: BastionSecurityGroup
        InstanceType:
          Ref: t2.micro
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: '10'
              VolumeType: gp2
              Encrypted: true
              DeleteOnTermination: true
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash
              set -x
              for e in $(echo "${EnvironmentVariables}" | tr ',' ' '); do
                export $e
              done
              export PATH=$PATH:/usr/local/bin
              #cfn signaling functions
              yum install git -y || apt-get install -y git || zypper -n install git
              sudo amazon-linux-extras install epel
              sudo yum install nodejs

              function cfn_fail
              {
                cfn-signal -e 1 --stack ${AWS::StackName} --region ${self:provide.region} --resource BastionLaunchConfiguration
                exit 1
              }

              function cfn_success
              {
                cfn-signal -e 0 --stack ${AWS::StackName} --region ${self:provide.region} --resource BastionAutoScalingGroup
                exit 0
              }

              until git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git ; do echo "Retrying"; done
              cd /quickstart-linux-utilities;
              source quickstart-cfn-tools.source;
              qs_update-os || qs_err;
              #qs_bootstrap_pip || qs_err " pip bootstrap failed ";
              qs_aws-cfn-bootstrap || qs_err " cfn bootstrap failed ";

              EIP_LIST="${EIP1}"
              CLOUDWATCHGROUP=${BastionMainLogGroup}
              cfn-init -v --stack '${AWS::StackName}' --resource BastionLaunchConfiguration --region ${self:provide.region} || cfn_fail
              [ $(qs_status) == 0 ] && cfn_success || cfn_fail